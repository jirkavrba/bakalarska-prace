%
%  Vzor bibliografické databáze pro automatickou tvorbu seznamu referencí
%  pomocí BibTeXu
%
%  Doporučený software pro správu databáze literatury formátu *.bib:
%    JabRef, http://jabref.sourceforge.net/
%
%  POZOR:
%
%    *  Písmena v názvech publikací, jež je třeba tisknout vždy velká, se musejí psát
%       do složených závorek ({T}hailand, {HIV})
%
%  ===========================================================================


@book{cherny_programming_2019,
	address = {Sebastopol, CA},
	edition = {First edition},
	title = {Programming {TypeScript}: making your {JavaScript} applications scale},
	isbn = {9781492037651},
	shorttitle = {Programming {TypeScript}},
	abstract = {Any programmer working with a dynamically typed language will tell you how hard it is to scale to more lines of code and more engineers. That's why Facebook, Google, and Microsoft invented gradual static type layers for their dynamically typed JavaScript and Python code. This practical book shows you how one such type layer, TypeScript, is unique among them: it makes programming fun with its powerful static type system. If you're a programmer with intermediate JavaScript experience, author Boris Cherny will teach you how to master the TypeScript language. You'll understand how TypeScript can help you eliminate bugs in your code and enable you to scale your code across more engineers than you could before. In this book, you'll: Start with the basics: Learn about TypeScript's different types and type operators, including what they're for and how they're used. Explore advanced topics: Understand TypeScript's sophisticated type system, including how to safely handle errors and build asynchronous programs. Dive in hands-on: Use TypeScript with your favorite frontend and backend frameworks, migrate your existing JavaScript project to TypeScript, and run your TypeScript application in production},
	publisher = {O'Reilly Media, Inc},
	author = {Cherny, Boris},
	year = {2019},
	note = {OCLC: on1102637415},
	keywords = {TypeScript (Computer program language), JavaScript (Computer program language), Application software, Development, Application software, Development, JavaScript (Computer program language), TypeScript (Computer program language)},
}


@misc{spring_framework,
	title = {Spring {Framework}},
	url = {https://spring.io/projects/spring-framework},
	abstract = {Level up your Java code and explore what Spring can do for you.},
	language = {en},
	urldate = {2022-12-12},
	author = {Webb, Phillip and Syer, Dave and Long, Josh and Nicoll, Stéphane and Winch, Rob and Wilkinson, Andy and Overdijk, Marcel and Dupuis, Christian and Deleuze, Sébastien and Simons, Michael and Pavić, Vedran and Bryant, Jay and Bhave, Madhura and Meléndez, Eddú and Frederick, Scott and Halbritter, Moritz},
	year = {2022},
}

@misc{spring_data,
	title = {Spring {Data}},
	url = {https://spring.io/projects/spring-data},
	abstract = {Level up your Java code and explore what Spring can do for you.},
	language = {en},
	urldate = {2022-12-12},
	author = {Webb, Phillip and Syer, Dave and Long, Josh and Nicoll, Stéphane and Winch, Rob and Wilkinson, Andy and Overdijk, Marcel and Dupuis, Christian and Deleuze, Sébastien and Simons, Michael and Pavić, Vedran and Bryant, Jay and Bhave, Madhura and Meléndez, Eddú and Frederick, Scott and Halbritter, Moritz},
	year = {2022},
}

@misc{spring_security,
	title = {Spring {Security}},
	url = {https://spring.io/projects/spring-security},
	abstract = {Level up your Java code and explore what Spring can do for you.},
	language = {en},
	urldate = {2022-12-12},
	author = {Webb, Phillip and Syer, Dave and Long, Josh and Nicoll, Stéphane and Winch, Rob and Wilkinson, Andy and Overdijk, Marcel and Dupuis, Christian and Deleuze, Sébastien and Simons, Michael and Pavić, Vedran and Bryant, Jay and Bhave, Madhura and Meléndez, Eddú and Frederick, Scott and Halbritter, Moritz},
	year = {2022},
}

@misc{spring_web,
	title = {Web {Applications} with {Spring}},
	url = {https://spring.io/web-applications},
	abstract = {Spring makes building web applications fast and hassle-free. By removing much of the boilerplate and configuration associated with web development, you get a modern web programming model that streamlines the development of server-side HTML applications, REST APIs, and bidirectional, event-based systems.},
	language = {en},
	urldate = {2022-12-12},
	author = {Webb, Phillip and Syer, Dave and Long, Josh and Nicoll, Stéphane and Winch, Rob and Wilkinson, Andy and Overdijk, Marcel and Dupuis, Christian and Deleuze, Sébastien and Simons, Michael and Pavić, Vedran and Bryant, Jay and Bhave, Madhura and Meléndez, Eddú and Frederick, Scott and Halbritter, Moritz},
	year = {2022},
}

@misc{spring_boot,
	title = {Spring {Boot} {Reference} {Documentation}},
	url = {https://docs.spring.io/spring-boot/docs/current/reference/html/},
	urldate = {2022-12-12},
	author = {Webb, Phillip and Syer, Dave and Long, Josh and Nicoll, Stéphane and Winch, Rob and Wilkinson, Andy and Overdijk, Marcel and Dupuis, Christian and Deleuze, Sébastien and Simons, Michael and Pavić, Vedran and Bryant, Jay and Bhave, Madhura and Meléndez, Eddú and Frederick, Scott and Halbritter, Moritz},
	month = nov,
	year = {2022},
}

@misc{risberg_spring_2004,
	title = {Spring {Framework} 1.0 {Final} {Released}},
	url = {https://spring.io/blog/2004/03/24/spring-framework-1-0-final-released},
	language = {en},
	urldate = {2023-01-30},
	author = {Risberg, Thomas},
	date = {2004},
}


@misc{vmware_pivotal_acquisition_2019,
	title = {{VMware} {Completes} {Acquisition} of {Pivotal} ‑ {VMware} {News} and {Stories}},
	url = {https://news.vmware.com/releases/vmware-completes-acquisition-of-pivotal},
	language = {en},
	urldate = {2023-01-30},
	journal = {VMware News and Stories},
    year = {2019},
}


@misc{bekker_microsoft_2002,
	title = {Microsoft {Releases} .{NET} {Framework}, {Visual} {Studio} .{NET} -},
	url = {https://rcpmag.com/articles/2002/01/16/microsoft-releases-net-framework-visual-studio-net.aspx},
	abstract = {Microsoft gave developers access Tuesday night to the final version of the centerpiece of its .NET Web services strategy.},
	language = {en-US},
	urldate = {2023-01-30},
	journal = {Redmond Channel Partner},
    year = {2002},
	author = {Bekker, Scott},
}

@misc{warren_clr_2022,
	title = {Common {Language} {Runtime} ({CLR}) overview - .{NET}},
	url = {https://learn.microsoft.com/en-us/dotnet/standard/clr},
	abstract = {Get started with common language runtime (CLR), .NET's run-time environment. The CLR runs code and provides services to make the development process easier.},
	language = {en-us},
	urldate = {2023-01-30},
	author = {Warren, Genevieve and Pine, David and Lander, Rich and Killeen, Sean},
    year = {2022},
}

@misc{dotnet_web_2023,
	title = {Create web {APIs} with {ASP}.{NET} {Core}},
	url = {https://learn.microsoft.com/en-us/aspnet/core/web-api/},
	abstract = {Learn the basics of creating a web API in ASP.NET Core.},
	language = {en-us},
	urldate = {2023-02-17},
	author = {Anderson, Rick},
	month = jan,
	year = {2023},
}

@misc{dotnet_security_2022,
	title = {Overview of {ASP}.{NET} {Core} {Authentication}},
	url = {https://learn.microsoft.com/en-us/aspnet/core/security/authentication/},
	abstract = {Learn about authentication in ASP.NET Core.},
	language = {en-us},
	urldate = {2023-02-17},
	author = {Rousos , Mike and Anderson, Rick},
	month = nov,
	year = {2022},
}

@misc{what_is_php,
	title = {{PHP}: {What} is {PHP}?},
	url = {https://www.php.net/manual/en/intro-whatis.php},
	urldate = {2023-02-18},
    year = {2023},
	author = {{The PHP Group}},
}

@misc{laravel,
	title = {Laravel - {The} {PHP} {Framework} {For} {Web} {Artisans}},
	url = {https://laravel.com/},
	abstract = {Laravel is a PHP web application framework with expressive, elegant syntax. We’ve already laid the foundation — freeing you to create without sweating the small things.},
	language = {en},
	urldate = {2023-02-18},
    date = {2023},
    author = {Otwell, Taylor},
}

@misc{gosling_java_2022,
	title = {The {Java}® {Language} {Specification} },
	url = {https://docs.oracle.com/javase/specs/jls/se19/html/jls-7.html},
	language = {English},
	urldate = {2023-02-18},
	author = {Gosling, James and Bill, Joy and Steele, Guy and Bracha, Gilad and Buckley, Alex and Smith, Daniel and Bierman, Gavin},
	month = aug,
	year = {2022},
}


@misc{pom_reference,
	title = {{POM} {Reference}},
	url = {https://maven.apache.org/pom.html},
	language = {English},
	urldate = {2023-02-18},
	author = {Redmond, Eric and {Karl Heinz Marbaise}},
    year = {2019}
}

@book{muschko_gradle_2014,
	address = {Shelter Island, NY},
	title = {Gradle in action},
	isbn = {9781617291302},
	publisher = {Manning},
	author = {Muschko, Benjamin},
	year = {2014},
	keywords = {Gradle (Computer file), Computer software, Verification, Computer software, Validation, Java (Computer program language), Domain-specific programming languages},
}

@book{richards_software_architecture_patterns_2015,
	title = {Software architecture patterns},
	isbn = {9781491924242},
	abstract = {"Just as developers use design patterns in software development, architects use well-defined architecture patterns to define the characteristics and shape of the architecture. Using the wrong architecture pattern (or no pattern at all) can sometimes be a very costly mistake resulting in an architecture that doesn't work. It is therefore vital that architects are aware of and understand the various architecture patterns available. During this webcast I will discuss several common architecture patterns, including the traditional layered architecture, microservices architecture, space-based architecture, event-driven architecture, and microkernel architecture. Along the way I will show real-world examples to demonstrate how the patterns work, as well as describe the pros and cons of each pattern. I will also discuss how requirements and operational aspects can drive which patterns to use. Using the right architecture pattern for your system is critical, because as we all know, once in place the architecture is very hard to change."--Resource description page},
	language = {eng},
	publisher = {O'Reilly Media},
	author = {Richards, Mark},
	year = {2015},
}

@book{koskela_effective_2013,
	address = {Shelter Island, NY},
	title = {Effective unit testing: a guide for {Java} developers},
	isbn = {9781935182573},
	shorttitle = {Effective unit testing},
	publisher = {Manning},
	author = {Koskela, Lasse},
	year = {2013},
	keywords = {Java (Computer program language), Computer programs, Testing},
}

@misc{liquibase_inc_2023,
	title = {Introduction to {Liquibase}},
	url = {https://docs.liquibase.com/concepts/introduction-to-liquibase.html},
	abstract = {The page contains the information on how Liquibase works.},
	urldate = {2023-03-06},
	author = {{Liquibase Inc.}},
	year = {2023},
}

@book{ebel_mastering_2019,
	edition = {1st edition},
	title = {Mastering {Kotlin}},
	isbn = {9781838555726},
	abstract = {Explore popular language features, Java to Kotlin interoperability, advanced topics, and practical applications by building a variety of sample projects Key Features Understand and leverage the syntax, tools, and patterns by writing code in Kotlin Explore practical topics such as Java interop, concurrency with coroutines, and functional programming Discover how to use Kotlin for build targets like Android, iOS, JavaScript, and backend service Book Description Using Kotlin without taking advantage of its power and interoperability is like owning a sports car and never taking it out of the garage. While documentation and introductory resources can help you learn the basics of Kotlin, the fact that it's a new language means that there are limited learning resources and code bases available in comparison to Java and other established languages. This Kotlin book will show you how to leverage software designs and concepts that have made Java the most dominant enterprise programming language. You'll understand how Kotlin is a modern approach to object-oriented programming (OOP). This book will take you through the vast array of features that Kotlin provides over other languages. These features include seamless interoperability with Java, efficient syntax, built-in functional programming constructs, and support for creating your own DSL. Finally, you will gain an understanding of implementing practical design patterns and best practices to help you master the Kotlin language. By the end of the book, you'll have obtained an advanced understanding of Kotlin in order to be able to build production-grade applications. What you will learn Model data using interfaces, classes, and data classes Grapple with practical interoperability challenges and solutions with Java Build parallel apps using concurrency solutions such as coroutines Explore functional, reactive, and imperative programming to build flexible apps Discover how to build your own domain-specific language Embrace functional programming using the standard library and Arrow Delve into the use of Kotlin for frontend JavaScript development Build server-side services using Kotlin and Ktor Who this book is for If you're a Kotlin developer looking to further their skills or a professional Java developer looking for better or professional resources in order to make a switch to Kotlin, this book is for you. Familiarity with Kotlin programming will assist with understanding key concepts covered in the book..},
	language = {eng},
	publisher = {Packt Publishing},
	author = {Ebel, Nate},
	year = {2019},
	note = {OCLC: 1235776071},
}

@book{walls_spring_2019,
	address = {Shelter Island},
	edition = {Fifth edition},
	title = {Spring in action},
	isbn = {9781617294945},
	abstract = {Spring Framework makes life easier for Java developers. New features in Spring 5 bring its productivity-focused approach to microservices, reactive development, and other modern application designs. With Spring Boot now fully integrated, you can start even complex projects with minimal configuration code. And the upgraded WebFlux framework supports reactive apps right out of the box! "Spring in action, fifth edition" guides you through Spring's core features, explained in Craig Walls' famously clear style. You'll roll up your sleeves and build a secure database-backed web app step by step. Along the way, you'll explore reactive programming, microservices, service discovery, RESTful APIs, deployment, and expert best practices. Whether you're just discovering Spring or leveling up to Spring 5, this manning classic is your ticket!},
	publisher = {Manning},
	author = {Walls, Craig},
	year = {2019},
	note = {OCLC: on1038439342},
	keywords = {Java (Computer program language), Application software, Development, Application software, Development, Java (Computer program language)},
}

@misc{gitlab_unit_test_reports,
	title = {Unit test reports},
	url = {https://docs.gitlab.com/ee/ci/testing/unit_test_reports.html},
	urldate = {2023-03-24},
	author = {{GitLab Inc.}},
}

@book{gulati_junit_2017,
	address = {Berkeley, CA},
	title = {Java {Unit} {Testing} with {JUnit} 5},
	isbn = {9781484230145 9781484230152},
	url = {http://link.springer.com/10.1007/978-1-4842-3015-2},
	language = {en},
	urldate = {2023-03-24},
	publisher = {Apress},
	author = {Gulati, Shekhar and Sharma, Rahul},
	year = {2017},
	doi = {10.1007/978-1-4842-3015-2},
}

@misc{liquibase_inc_sql_changelog,
	title = {Example {Changelogs}: {SQL} {Format}},
	url = {https://docs.liquibase.com/concepts/changelogs/sql-format.html},
	abstract = {Reference information for SQL changelogs. Liquibase supports SQL as a format for storing your changelog files.},
	urldate = {2023-03-24},
	author = {{Liquibase Inc.}},
	year = {2023},
}


@book{flanagan_javascript_2020,
	address = {Beijing [China] ; Sebastopol, CA},
	edition = {Seventh edition},
	title = {{JavaScript}: the definitive guide: master the world's most-used programming language},
	isbn = {9781491952023},
	shorttitle = {{JavaScript}},
	publisher = {O'Reilly Media, Inc},
	author = {Flanagan, David},
	year = {2020},
	keywords = {JavaScript (Computer program language), Web servers, Object-oriented programming (Computer science)},
}


@book{kane_docker_2018,
	address = {Sebastopol, CA},
	edition = {Second edition},
	title = {Docker: up and running: shipping reliable containers in production},
	isbn = {9781492036739},
	shorttitle = {Docker},
	publisher = {O'Reilly Media, Inc},
	author = {Kane, Sean P. and Matthias, Karl},
	year = {2018},
	keywords = {Open source software, Application software, Development Automation, Virtual computer systems, Computer software, Development, Linux device drivers (Computer programs)},
}

@misc{fowler_transparent_2013,
	title = {Transparent compilation},
	url = {https://martinfowler.com/bliki/TransparentCompilation.html},
        year = {2013},
	urldate = {2023-02-21},
	journal = {martinfowler.com},
	author = {Fowler, Martin},
}


@misc{web_extensions_2019,
	title = {{EmPoWeb}: {Empowering} {Web} {Applications} with {Browser} {Extensions}},
	shorttitle = {{EmPoWeb}},
	url = {http://arxiv.org/abs/1901.03397},
	abstract = {Browser extensions are third party programs, tightly integrated to browsers, where they execute with elevated privileges in order to provide users with additional functionalities. Unlike web applications, extensions are not subject to the Same Origin Policy (SOP) and therefore can read and write user data on any web application. They also have access to sensitive user information including browsing history, bookmarks, cookies and list of installed extensions. Extensions have a permanent storage in which they can store data and can trigger the download of arbitrary files on the user's device. For security reasons, browser extensions and web applications are executed in separate contexts. Nonetheless, in all major browsers, extensions and web applications can interact by exchanging messages. Through these communication channels, a web application can exploit extension privileged capabilities and thereby access and exfiltrate sensitive user information. In this work, we analyzed the communication interfaces exposed to web applications by Chrome, Firefox and Opera browser extensions. As a result, we identified many extensions that web applications can exploit to access privileged capabilities. Through extensions' APIS, web applications can bypass SOP, access user cookies, browsing history, bookmarks, list of installed extensions, extensions storage, and download arbitrary files on the user's device. Our results demonstrate that the communications between browser extensions and web applications pose serious security and privacy threats to browsers, web applications and more importantly to users. We discuss countermeasures and proposals, and believe that our study and in particular the tool we used to detect and exploit these threats, can be used as part of extensions review process by browser vendors to help them identify and fix the aforementioned problems in extensions.},
	urldate = {2023-04-06},
	publisher = {arXiv},
	author = {Somé, Dolière Francis},
	month = jan,
	year = {2019},
	note = {arXiv:1901.03397 [cs]},
	keywords = {Computer Science - Cryptography and Security},
}